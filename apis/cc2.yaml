openapi: 3.1.0
x-stoplight:
  id: 1wr0t4tb85c5f
info:
  title: Teacher
  version: '1.0'
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /teachers:
    get:
      summary: Your GET endpoint
      tags:
        - teacher
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
              examples:
                Get all teachers:
                  value:
                    - id: '1'
                      full_name: Ola
                      schoolId: '123'
                      start_date: '2020-02-02'
                      end_date: '2021-01-01'
                    - id: '2'
                      full_name: Kola
                      schoolId: '234'
                      start_date: '2020-03-03'
                      end_date: '2021-01-01'
      operationId: get-teachers
      description: Get all teachers
      parameters:
        - $ref: '#/components/parameters/customerId'
  '/teachers/{teacher}':
    parameters:
      - schema:
          type: string
        name: teacher
        in: path
        required: true
    get:
      summary: Get single teacher
      tags:
        - teacher
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
              examples: {}
        '404':
          description: Not Found
      operationId: get-teachers-teacher
      parameters:
        - $ref: '#/components/parameters/customerId'
      description: Get single teacher
    put:
      summary: Update teacher
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
      operationId: put-teachers-teacher
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherCreate'
    delete:
      summary: ''
      operationId: delete-teachers-teacher
      responses:
        '200':
          description: OK
      parameters:
        - $ref: '#/components/parameters/customerId'
  /teacher:
    post:
      summary: Create teacher
      tags:
        - teacher
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
              examples:
                example-1:
                  value:
                    id: '123'
                    full_name: First Last
                    schoolId: daf43058-c155-46cf-a143-aa373095b1f3
                    start_date: '2020-01-01'
                    end_date: '2022-02-02'
      operationId: post-teacher
      parameters:
        - $ref: '#/components/parameters/customerId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherCreate'
            examples:
              example-1:
                value:
                  full_name: Lasse Kongo
                  schoolId: daf43058-c155-46cf-a143-aa373095b1f3
                  start_date: '2020-01-01'
                  end_date: '2021-01-01'
          application/xml:
            schema:
              type: object
              properties: {}
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
        '':
          type:
            - string
            - object
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    Teacher:
      title: Teacher
      x-stoplight:
        id: 41p6tz9xdihfk
      type: object
      examples:
        - id: '123'
          full_name: First Last
          schoolId: daf43058-c155-46cf-a143-aa373095b1f3
          start_date: '2020-01-01'
          end_date: '2022-02-02'
      description: The object that represents teacher entity
      properties:
        id:
          type: string
          readOnly: true
        full_name:
          type: string
        schoolId:
          type: string
        start_date:
          type: string
        end_date:
          type: string
    TeacherCreate:
      title: TeacherCreate
      x-stoplight:
        id: 6kfwcevg2igba
      type: object
      examples:
        - full_name: Lasse Kongo
          schoolId: daf43058-c155-46cf-a143-aa373095b1f3
          start_date: '2020-01-01'
          end_date: '2021-01-01'
      properties:
        full_name:
          type: string
          minLength: 3
          maxLength: 20
        schoolId:
          type: string
          example: daf43058-c155-46cf-a143-aa373095b1f3
          minLength: 36
          maxLength: 36
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
      required:
        - full_name
        - schoolId
        - start_date
  parameters:
    customerId:
      name: customerId
      in: header
      required: true
      schema:
        type: string
      description: Id of the customer
  requestBodies:
    Teacher:
      content:
        application/json:
          schema:
            type: object
